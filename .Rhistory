install.packages("swirl")
library(swirl)
install_from_swirl("Statistical Inference")
swirl()
myplot(34)
myplot(33.3)
myplot(30)
myplot(28)
z <- qnorm(.95)
z <- qnorm(30+z, mean=30, lower.tail=FALSE)
qnorm(30+z, mean=30, lower.tail=FALSE)
z <- qnorm(.95)
qnorm(30+z, mean=30, lower.tail=FALSE)
pnorm(30+z, mean=30, lower.tail=FALSE)
pnorm(30+z, mean=32, lower.tail=FALSE)
pnorm(30+z, mean=32, sd=1, lower.tail=FALSE)
pnorm(30+z, mean=32, sd=2, lower.tail=FALSE)
pnorm(30+z*2, mean=32, sd=2, lower.tail=FALSE)
run power.t.test(n = 16, delta = 2 / 4, sd=1, type = "one.sample", alt = "one.sided")$power
power.t.test(n = 16, delta = 2 / 4, sd=1, type = "one.sample", alt = "one.sided")$power
power.t.test(n = 16, delta = 2 , sd=4, type = "one.sample", alt = "one.sided")$power
power.t.test(n = 16, delta = 100 , sd=200, type = "one.sample", alt = "one.sided")$power
power.t.test(power = .8, delta = 2 / 4, sd=1, type = "one.sample", alt= "one.sided")$n
power.t.test(power = .8, delta = 2 , sd=4, type = "one.sample", alt= "one.sided")$n
power.t.test(power = .8, delta = 100 , sd=200, type = "one.sample", alt= "one.sided")$n
power.t.test(power = .8, n=26, sd=1, type = "one.sample", alt= "one.sided")$delta
power.t.test(power = .8, n=27, sd=1, type = "one.sample", alt= "one.sided")$delta
myplot(34)
myplot(33.3)
myplot(30)
myplot(28)
z <- qnorm(.95)
pnorm(30+z, mean=30, lower.tail=FALSE)
pnorm(30+z, mean=32, lower.tail=FALSE)
pnorm(30+z, mean=32, sd=1, lower.tail=FALSE)
pnorm(30+z*2, mean=32, sd=2, lower.tail=FALSE)
power.t.test(n = 16, delta = 2 / 4, sd=1, type = "one.sample", alt = "one.sided")$power
power.t.test(n = 16, delta = 2, sd=4, type = "one.sample", alt = "one.sided")$power
power.t.test(n = 16, delta = 100, sd=200, type = "one.sample", alt = "one.sided")$power
power.t.test(power=.8, delta = 2, sd=1, type = "one.sample", alt = "one.sided")$n
power.t.test(power=.8, delta = 2/4, sd=1, type = "one.sample", alt = "one.sided")$n
power.t.test(power=.8, delta = 2, sd=4, type = "one.sample", alt = "one.sided")$n
power.t.test(power=.8, delta = 100, sd=200, type = "one.sample", alt = "one.sided")$n
power.t.test(power=.8, n=26, sd=1, type = "one.sample", alt = "one.sided")$delta
power.t.test(power=.8, n=27, sd=1, type = "one.sample", alt = "one.sided")$delta
head(pValues)
sum(pValues < .05)
?p.adjust
sum(p.adjust(pValues, method="bonferroni"))
sum(p.adjust(pValues, method="bonferroni") < .05)
sum(p.adjust(pValues, method="BH") < .05)
tail(trueStatus)
table(pValues2<.05, trueStatus)
4.8
24/500
table(p.adjust(pValues, method="bonferroni") < .05, trueStatus)
table(p.adjust(pValues2, method="bonferroni") < .05, trueStatus)
table(p.adjust(pValues2, method="BH") < .05, trueStatus)
1*(1/6) + 2*(1/6) + 3*(1/6) + 4*(1/6) + 5*(1/6) +6*(1/6)
print(g2)
head(sh)
length(sh)
nh
median(resampledMedians)
median(sh)
?sample
sample(fh, nh*B, replace=TRUE)
sam <- sample(fh, nh*B, replace=TRUE)
?matrix
resam <- matrix(sam, B, nh)
?apply
meds <- apply(resam, 1, median)
median(fh) - median(meds)
sd(meds)
sd(resampledMedians)
?quantile
quantile(resampledMedians, c(.025,.975))
quantile(meds, c(.025,.975))
dim(InsectSprays)
names(InsectSprays)
range(Bdata$count)
range(Cdata$count)
BCcounts
group
testStat
obs < testStat(BCcounts, group)
obs <- testStat(BCcounts, group)
obs
mean(Bdata$count) - mean(Cdata$count)
sample(groups)
sample(group)
perms <- sapply(1 : 10000, function(i) testStat(BCcounts, sample(group)))
perms > obs
mean(perms > obs)
testStat(DEcounts, group)
perms <- sapply(1 : 10000, function(i) testStat(DEcounts, sample(group)))
?t.test
A <- c(140, 138, 150, 148, 135)
B <- c(132, 135, 151, 146, 130)
t.test(A, B)
t.test(A, B, paired=TRUE)
1100 + c(-1, 1) * qnorm(.975) * 30/sqrt(9)
pbinom(74, size=4, prob=.5, lower.tail=FALSE)
pbinom(74, size=4, prob=.5, lower.tail=FALSE)
pbinom(74, size=4, prob=.75, lower.tail=FALSE)
pbinom(74, size=4, prob=.75, lower.tail=FALSE)
?pbinom
?quantile
quantile(.75)
?pbinom
?qbinom
qbinom(.75, 4, .5)
pbinom(3, size=4, prob=.75, lower.tail=FALSE)
pbinom(3, size=4, prob=.5, lower.tail=FALSE)
round(pbinom(3, size=4, prob=.5, lower.tail=FALSE), 2)
round(pbinom(3, size=4, prob=.5, lower.tail=FALSE), 3)
?t.test
?ppois
qpois(10/1787, 1/100, lower.tail=FALSE)
qpois(10, 1/100 * 1787, lower.tail=FALSE)
qpois(10, (1/100) * 1787, lower.tail=FALSE)
ppois(10, (1/100) * 1787, lower.tail=FALSE)
1 - ppois(10, (1/100) * 1787, lower.tail=FALSE)
?t.test
sp <- sqrt((8 * 1.5^2 + 8*1.8^2)/ (9 + 9 - 2))
sp
-3 -1 + c(-1, 1)*qt(.975, 16) * sp * sqrt(1/9 + 1/9)
(-3 - 1)/sp
?pt
?pmin
?rnorm
A <- rnorm(9, mean=-3, sd=1.5)
A
B <- rnorm(9, mean=1, sd=1.8)
t.test(A, B)
?t.test
t.test(A, B, var.equal=TRUE)
B <- rnorm(9, mean=1, sd=1.8)
B <- rnorm(10000, mean=1, sd=1.8)
A <- rnorm(10000, mean=-3, sd=1.5)
t.test(A, B, var.equal=TRUE)
B <- rnorm(9, mean=1, sd=1.8)
A <- rnorm(10000, mean=-3, sd=1.5)
z <- qnorm(1 - 0.05)
z
pnorm(0 + z * .04^2/sqrt(100), .01, sd=.04, lower.tail=FALSE)
pwer.t.test(delta=.01,power=.9, sd=.04, type="one.sample", alt="one.sided")$n
power.t.test(delta=.01,power=.9, sd=.04, type="one.sample", alt="one.sided")$n
power.t.test(delta=.01,n=100 sd=.04, type="one.sample", alt="one.sided")$power
power.t.test(delta=.01,n=100, sd=.04, type="one.sample", alt="one.sided")$power
?tvalue
power.t.test(n=9, sd=30, type="one.sample", alt="one.sided")
power.t.test(n=9, power=.9, sd=30, type="one.sample", alt="one.sided")$delta
1100 - 32.13889
1100 + 32.13889
power.t.test(n=9, power=.9, sd=30, type="one.sample", alt="one.sided")$delta
power.t.test(n=9, power=.9, sd=30, type="one.sample", alt="two.sided")$delta
1100 + 37.12437
1100 - 37.12437
?qnorm
pnorm(1.654, mean=1100, sd=30)
pnorm(.975, mean=1100, sd=30)
?quantile
?qt
his(rnorm(1000, mean=1100, sd=30))
hist(rnorm(1000, mean=1100, sd=30))
?rt
1100 + c(-1, 1)*qnorm(.975)*30/sqrt(9)
1100 + c(-1, 1)*qt(.975,8)*30/sqrt(9)
?t.test
A <- (1,1,1,0)
A <- c(1,1,1,0)
?sample
B <- sample(A, 1000, replace=TRUE)
B
t,test(B)
t.test(B)
?t.test
t.test(B)
pbinom(50, size=4,prob=.75, lower.tail=FALSE)
pbinom(50, size=4,prob=.75, lower.tail=FALSE)
?pbinom
pbinom(50, size=4,prob=.75, lower.tail=FALSE)
?quantile
?qbinom
qbinom(.75, 4, .5, lower.tail=FALSE)
qbinom(1, 4, .5, lower.tail=FALSE)
qbinom(.5, 4, .75, lower.tail=FALSE)
pbinom(3, size=4,prob=.75, lower.tail=FALSE)
install.packages("swirl")
install.packages("swirl")
setwd("~/Desktop/R Programming/repo/PerformanceMonitoring")
?createDataPartition
install.packages("caret")
library(caret)
?createDataPartition
library(AppliedPredictiveModeling)
library(cement)
install.packages("cement")
library(cement)
library(AppliedPredictiveModeling)
install.packages("AppliedPredictiveModelingâ€™")
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
View(concrete)
hist(concrete$Superplasticizer)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
View(training)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis, p = 0.50)
training = adData[trainIndex,]
trainIndex = createDataPartition(diagnosis, p = 0.50, list=FALSE)
training = adData[trainIndex,]
training = adData[-trainIndex,]
training = adData[trainIndex,]
testing = adData[-trainIndex,]
dim(training)
dim(testing)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
?preProcess
View(training)
?grepl
training[grepl("^IL*", names(training))]
View(training[grepl("^IL*", names(training))])
View(training[grepl("IL*", names(training))])
View(training[grepl("^IL*$", names(training))])
View(training[grepl("^IL*", names(training))])
View(training[grepl("^IL.*", names(training))])
il_training <- training[grepl("^IL.*", names(training))]
?preProcess
preProcess(il_training, thresh=.90)
?preProcess
preProcess(il_training, thresh=.90, method=NULL)
preProcess(il_training, thresh=.90, method=NA)
preProcess(il_training, thresh=.90, method=pca)
preProcess(il_training, thresh=.90, method=c(pca))
preProcess(il_training, thresh=.90, method=c("pca"))
preObj <- preProcess(il_training, thresh=.80, method=c("pca"))
?predict
predict(preObj, il_training)
predict(preObj, il_training)$finalModel
View(predict(preObj, il_training))
?train
View(testing)
testPC <- predict(preObj, testing)
modelFit <- train(training$diagnosis ~ ., method="glm", data=trainPC)
testPC <- predict(preObj, testing)
preObj <- preProcess(il_training, thresh=.80, method=c("pca"))
testPC <- predict(preObj, training)
testPC <- predict(preObj, il_training)
modelFit <- train(training$diagnosis ~ ., method="glm", data=trainPC)
trainPC <- predict(preObj, il_training)
modelFit <- train(training$diagnosis ~ ., method="glm", data=trainPC)
testPC <- predict(preObj, testing)
confusionMatrix(training$diagnosis, predict(modelFit, trainPC))
modelFit <- train(training$diagnosis ~ ., method="glm", data=training)
confusionMatrix(training$diagnosis, predict(modelFit))
modelFit <- train(training$diagnosis ~ ., method="glm", data=il_training)
confusionMatrix(training$diagnosis, predict(modelFit))
testPC <- predict(preObj, il_testing)
trainPC <- predict(preObj, il_training)
modelFit <- train(training$diagnosis ~ ., method="glm", data=trainPc)
modelFit <- train(training$diagnosis ~ ., method="glm", data=trainPC)
confusionMatrix(training$diagnosis, predict(modelFit))
il_training <- training[grepl("^IL.*", names(training))]
il_training <- cbind(training$diagnosis, training[grepl("^IL.*", names(training))])
View(il_training)
names(il_training)
names(il_training)[1]
names(il_training)[1] <- "diagnosis"
names(il_training)[1]
names(il_training)
preObj <- preProcess(il_training, thresh=.90, method=c("pca"))
preObj <- preProcess(il_training, thresh=.90, method=c("pca"))
preObj <- preProcess(il_training, thresh=.90, method=c("pca"))
preObj <- preProcess(il_training[,2:13], thresh=.90, method=c("pca"))
preProcess(il_training[,2:13], thresh=.90, method=c("pca"))
preObj <- preProcess(il_training[,2:13], thresh=.90, method=c("pca"))
trainPC <- predict(preObj, il_training)
trainPC <- predict(preObj, il_training[, 2:13])
modelFit <- train(il_training$diagnosis ~ ., method="glm", data=trainPC)
confusionMatrix(il_training$diagnosis, predict(modelFit))
modelFit <- train(il_training$diagnosis ~ ., method="glm", data=il_training)
confusionMatrix(il_training$diagnosis, predict(modelFit))
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis, p = 0.50)
training = adData[trainIndex,]
testIndex = createDataPartition(diagnosis, p = 0.50,list=FALSE)
training = adData[-testIndex,]
testing = adData[testIndex,]
dim(testing)
dim(training)
library(AppliedPredictiveModeling)
data(concrete)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
View(training)
hist(training$Superplasticizer)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
il_training <- training[grepl("^IL.*", names(training))]
View(il_training)
preObj <- preProcess(il_training, thresh=.80, method=c("pca"))
View(preObj)
preProcess(il_training, thresh=.80, method=c("pca"))
il_training <- cbind(training$diagnosis, training[grepl("^IL.*", names(training))])
names(il_training)[1] <- "diagnosis"
View(il_training)
preObj <- preProcess(il_training[,2:13], thresh=.80, method=c("pca"))
trainPC <- predict(preObj, il_training[, 2:13])
modelFit <- train(il_training$diagnosis ~ ., method="glm", data=trainPC)
confusionMatrix(il_training$diagnosis, predict(modelFit))
testPC <- predict(preObj, testing)
il_testing <- cbind(testing$diagnosis, testing[grepl("^IL.*", names(testing))])
names(il_testing)[1] <- "diagnosis"
testPC <- predict(preObj, il_testing[,2:13])
confusionMatrix(il_testing$diagnosis, predict(modelFit, testPC))
modelFit <- train(il_training$diagnosis ~ ., method="glm", data=il_training)
confusionMatrix(il_testing$diagnosis, predict(modelFit))
confusionMatrix(il_training$diagnosis, predict(modelFit, il_testing))
confusionMatrix(il_testing$diagnosis, predict(modelFit, il_testing))
